/*
https://projecteuler.net/problem=12
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println("problem 12")
	triangleNums := make(map[int][]int)
	for i := 1; i < 100000; i++ {
		if i%1000 == 0 {
			fmt.Println("i=", i)
		}
		sum := 0
		for j := 1; j <= i; j++ {
			sum += j
			//fmt.Print(j, ", ")
		}
		fmt.Println("sum=", sum)
		//find the factors
		for k := 1; k <= int(math.Sqrt(float64(sum))); k++ {
			if sum%k == 0 {
				triangleNums[sum] = append(triangleNums[sum], sum/k)
				triangleNums[sum] = append(triangleNums[sum], k)
			}
		}
		if len(triangleNums[sum]) > 500 {
			fmt.Println(sum, " has over 500 divisors")
			return
		}
	}
	fmt.Println(triangleNums)
	for key, value := range triangleNums {
		fmt.Println(key, value)

	}
}
