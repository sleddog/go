/*
https://projecteuler.net/problem=44
Pentagon numbers

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/

package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println("problem 44")
	size := 10000
	p := make([]int, size)
	p[0] = 0
	for n := 1; n < size; n++ {
		p[n] = pentagonal(n)
	}
	fmt.Println(p)
	min := 2147483647
	for j := 1; j < size; j++ {
		for k := 1; k < size; k++ {
			if j >= k {
				continue
			}
			add := p[j] + p[k]
			diff := p[k] - p[j]
			if ok, v := isPentagonal(add, p); ok {
				if ok2, v2 := isPentagonal(diff, p); ok2 {
					fmt.Printf("j(%v):%v, k(%v):%v, add=%v, diff=%v\n", j, p[j], k, p[k], add, diff)
					fmt.Printf("add(%v):%v\n", v, add)
					fmt.Printf("diff(%v):%v\n", v2, diff)
					fmt.Println("FOUND ONE")
					jkDiff := int(math.Abs(float64(diff)))
					fmt.Println(jkDiff)
					if jkDiff <= min {
						min = jkDiff
					}
				}
			}
		}
	}
	fmt.Println("min=", min)
}

func isPentagonal(v int, p []int) (bool, int) {
	for k, n := range p {
		if n == v {
			return true, k
		}
	}
	return false, -1
}

func pentagonal(n int) int {
	return (n * (3*n - 1)) / 2
}
