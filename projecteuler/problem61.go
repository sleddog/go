/*
https://projecteuler.net/problem=61
Cyclical figurate numbers

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle    P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
Square      P4,n=n2             1, 4, 9, 16, 25, ...
Pentagonal  P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
Hexagonal   P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
Heptagonal  P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
Octagonal   P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).  Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.  This is the only set of 4-digit numbers with this property.  Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/

package main

import (
	"fmt"
	"strconv"
)

func main() {
	fmt.Println("problem 61")
	fmt.Println("p3(127)=", p3(127))
	fmt.Println("p4(91)=", p4(91))
	fmt.Println("p5(44)=", p5(44))

	//collect all 4 digit values
	p3s := find4Digits(p3)
	p4s := find4Digits(p4)
	p5s := find4Digits(p5)
	p6s := find4Digits(p6)
	p7s := find4Digits(p7)
	p8s := find4Digits(p8)

	var solution [6]int

	//start to make connections
	for _, p3m := range p3s {
		//clear out the solution before proceeding
		solution[0] = 0
		solution[1] = 0
		solution[2] = 0
		solution[3] = 0
		solution[4] = 0
		solution[5] = 0

		//set the first match
		solution[0] = p3m
		p4Matches := findMatches(p3m, p4s)
		for _, p4m := range p4Matches {
			solution[1] = p4m
			fmt.Println("solution=", solution)
			p5Matches := findMatches(p4m, p5s)
			for _, p5m := range p5Matches {
				solution[2] = p5m
				fmt.Println("solution=", solution)
				p6Matches := findMatches(p5m, p6s)
				for _, p6m := range p6Matches {
					solution[3] = p6m
					fmt.Println("solution=", solution)
					p7Matches := findMatches(p6m, p7s)
					for _, p7m := range p7Matches {
						solution[4] = p7m
						fmt.Println("solution=", solution)
						p8Matches := findMatches(p7m, p8s)
						for _, p8m := range p8Matches {
							solution[5] = p8m
							fmt.Println("solution=", solution)
							fmt.Println("sum=", sum(solution))
							/*
								//finish cycle - has to match the start of p8

									startp3 := strconv.Itoa(p3m)[0:2]
									endp8 := strconv.Itoa(p8m)[2:4]
									fmt.Println("startp3=", startp3, "endp8=", endp8)
									if endp8 == startp3 {
										solution[5] = p8m
										fmt.Println("FOUND IT")
										fmt.Println("solution=", solution)
										return
									}
							*/
						}
					}
				}
			}
		}

		fmt.Println("solution=", solution)
	}

}

type fn func(int) int

func find4Digits(f fn) []int {
	m := []int{}
	n := 1
	for {
		x := f(n)
		if x > 9999 {
			break
		}
		if x >= 1000 && x <= 9999 {
			m = append(m, x)
		}
		n++
	}
	return m
}

func findMatches(v int, pXs []int) []int {
	s := strconv.Itoa(v)
	end := s[2:4]
	return matches(end, pXs)
}

func matches(end string, m []int) []int {
	matches := []int{}
	for _, v := range m {
		s := strconv.Itoa(v)
		beginning := s[0:2]
		e, _ := strconv.Atoi(end)
		b, _ := strconv.Atoi(beginning)
		if beginning == end {
			if e != b {
				fmt.Println("WE GOT PROBLEMS")
				fmt.Println("e=", e, "b=", b, "beginning=", beginning, "end=", end)
			}
			matches = append(matches, v)
		} else {
			if e == b {
				fmt.Println("WE GOT PROBLEMS")
				fmt.Println("e=", e, "b=", b, "beginning=", beginning, "end=", end)
			}
		}
	}
	return matches
}

//Triangle    P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
func p3(n int) int {
	return (n * (n + 1)) / 2
}

//Square      P4,n=n2             1, 4, 9, 16, 25, ...
func p4(n int) int {
	return n * n
}

//Pentagonal  P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
func p5(n int) int {
	return (n * (3*n - 1)) / 2
}

//Hexagonal   P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
func p6(n int) int {
	return n * (2*n - 1)
}

//Heptagonal  P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
func p7(n int) int {
	return (n * (5*n - 3)) / 2
}

//Octagonal   P8,n=n(3n−2)        1, 8, 21, 40, 65, ...
func p8(n int) int {
	return n * (3*n - 2)
}

func sum(solution [6]int) int {
	sum := 0
	for _, s := range solution {
		sum += s
	}
	return sum
}
